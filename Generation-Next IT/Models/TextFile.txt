public class MeetingMinuteMaster
    {
        public int MeetingMinuteMasterID { get; set; }

        //public bool IsCorporate { get; set; }
        //public bool IsIndividual { get; set; }

        [EnumDataType(typeof(CustomerType))]
        public CustomerType CustomerType { get; set; } //enum is better for scalability

        public int? CorporateCustomerID { get; set; }
        public int? IndividualCustomerID { get; set; }

        [DataType(DataType.Date)]
        [Display(Name = "Date"), Column(TypeName = "date"), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime Date { get; set; } = DateTime.Now.Date;

        [DataType(DataType.Time)]
        [Display(Name = "Time"), Column(TypeName = "time"), DisplayFormat(DataFormatString = "{0:h:mm tt}")]
        public DateTime Time { get; set; } = default!;


        [Required(ErrorMessage = "Meeting Place is required."), StringLength(100)]
        public string MeetingPlace { get; set; } = default!;

        [Required(ErrorMessage = "Attends From Client Side is required."), StringLength(1000)]
        public string AttendsFromClient { get; set; } = default!;

        [Required(ErrorMessage = "Attends From Host Side is required."), StringLength(1000)]
        public string AttendsFromHost { get; set; } = default!;

        [Required(ErrorMessage = "Agenda is required.")]
        public string Agenda { get; set; } = default!;

        [Required(ErrorMessage = "Discussion is required.")]
        public string Discussion { get; set; } = default!;

        [Required(ErrorMessage = "Decision is required.")]
        public string Decision { get; set; } = default!;

        // Navigation property 
        public CorporateCustomer? CorporateCustomer { get; set; }
        public IndividualCustomer? IndividualCustomer { get; set; }
        public List<MeetingMinuteDetail> MeetingMinuteDetails { get; set; } = new List<MeetingMinuteDetail>();
    }
    public class CorporateCustomer
    {
        public int CorporateCustomerID { get; set; }

        [Required(ErrorMessage = "Customer Name is required."), StringLength(50), Display(Name = "Customer Name")]
        public string CorporateCustomerName { get; set; } = default!;

        // Navigation property 
        public List<MeetingMinuteMaster> MeetingMinuteMasters { get; set; } = new List<MeetingMinuteMaster>();
    }

    public class IndividualCustomer
    {
        public int IndividualCustomerID { get; set; }

        [Required(ErrorMessage = "Customer Name is required."), StringLength(50), Display(Name = "Customer Name")]
        public string IndividualCustomerName { get; set; } = default!;

        // Navigation property 
        public List<MeetingMinuteMaster> MeetingMinuteMasters { get; set; } = new List<MeetingMinuteMaster>();
    }

    public class MeetingMinuteDetail
    {
        public int MeetingMinuteDetailID { get; set; }

        public int? Quantity { get; set; }

        public int? Unit { get; set; }

        // Foreign keys
        public int MeetingMinuteMasterID { get; set; }

        public int ProductServiceID { get; set; }

        // Navigation property
        public MeetingMinuteMaster? MeetingMinuteMaster { get; set; }
        public ProductService? ProductService { get; set; }
    }
    public class ProductService
    {
        public int ProductServiceID { get; set; }

        [Required(ErrorMessage = "Product/Service Name is required.")]
        public string ProductServiceName { get; set; } = default!;

        // Navigation property 
        public List<MeetingMinuteDetail> MeetingMinuteDetails { get; set; } = new List<MeetingMinuteDetail>();
    }

    public enum CustomerType
    {
        Corporate,
        Individual
    }

    public class MeetingDbContext : DbContext
    {
        public MeetingDbContext(DbContextOptions<MeetingDbContext> options) : base(options)
        {
        }
        public DbSet<MeetingMinuteMaster>? Meeting_Minutes_Master_Tbl { get; set; }
        public DbSet<CorporateCustomer>? Corporate_Customer_Tbl { get; set; }
        public DbSet<IndividualCustomer>? Individual_Customer_Tbl { get; set; }
        public DbSet<MeetingMinuteDetail>? Meeting_Minutes_Details_Tbl { get; set; }
        public DbSet<ProductService>? Products_Service_Tbl { get; set; }
 
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Configure relationships
            modelBuilder.Entity<MeetingMinuteMaster>()
                   .HasOne(m => m.CorporateCustomer)
                   .WithMany(cc => cc.MeetingMinuteMasters) 
                   .HasForeignKey(m => m.CorporateCustomerID); 

            modelBuilder.Entity<MeetingMinuteMaster>()
                .HasOne(m => m.IndividualCustomer)
                .WithMany(ic => ic.MeetingMinuteMasters)
                .HasForeignKey(m => m.IndividualCustomerID); 

            modelBuilder.Entity<MeetingMinuteDetail>()
                .HasOne(md => md.MeetingMinuteMaster)
                .WithMany(m => m.MeetingMinuteDetails)
                .HasForeignKey(md => md.MeetingMinuteMaster);

            modelBuilder.Entity<MeetingMinuteDetail>()
                .HasOne(md => md.ProductService)
                .WithMany(ps => ps.MeetingMinuteDetails)
                .HasForeignKey(md => md.ProductServiceID);

            modelBuilder.Entity<ProductService>().HasData(
                new ProductService { ProductServiceID = 1, ProductServiceName = "Laptop" },
                new ProductService { ProductServiceID = 2, ProductServiceName = "Website making" },
                new ProductService { ProductServiceID = 3, ProductServiceName = "Mouse" },
                new ProductService { ProductServiceID = 4, ProductServiceName = "Keyboard" },
                new ProductService { ProductServiceID = 5, ProductServiceName = "web hosting" }
            );

            modelBuilder.Entity<CorporateCustomer>().HasData(
                new CorporateCustomer { CorporateCustomerID = 1, CorporateCustomerName = "Abdullah" },
                new CorporateCustomer { CorporateCustomerID = 2, CorporateCustomerName = "Sultana" },
                new CorporateCustomer { CorporateCustomerID = 3, CorporateCustomerName = "Nayeem" }
            );

            modelBuilder.Entity<IndividualCustomer>().HasData(
                new IndividualCustomer { IndividualCustomerID = 1, IndividualCustomerName = "Nayeem" },
                new IndividualCustomer { IndividualCustomerID = 2, IndividualCustomerName = "Emran" },
                new IndividualCustomer { IndividualCustomerID = 3, IndividualCustomerName = "Saleh" }
            );

            base.OnModelCreating(modelBuilder);
        }
    }